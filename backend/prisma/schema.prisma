// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Instructor {
  id                              Int                               @id @default(autoincrement())
  name                            String
  email                           String                            @unique
  password                        String
  instructorAvailability          InstructorAvailability[]
  classes                         Class[]
  instructorRecurringAvailability InstructorRecurringAvailability[]
}

model InstructorRecurringAvailability {
  id                     Int                      @id @default(autoincrement())
  instructorId           Int
  rrule                  String
  instructor             Instructor               @relation(fields: [instructorId], references: [id])
  instructorAvailability InstructorAvailability[]
}

model InstructorAvailability {
  instructorId                      Int
  instructorRecurringAvailabilityId Int?
  dateTime                          DateTime
  instructor                        Instructor                       @relation(fields: [instructorId], references: [id])
  instructorRecurringAvailability   InstructorRecurringAvailability? @relation(fields: [instructorRecurringAvailabilityId], references: [id])

  @@id([instructorId, dateTime])
}

model Customer {
  id       Int        @id @default(autoincrement())
  name     String
  email    String     @unique
  password String
  classes  Class[]
  children Children[]
}

model Class {
  id               Int                @id @default(autoincrement())
  instructorId     Int
  customerId       Int
  dateTime         DateTime
  status           Status
  instructor       Instructor         @relation(fields: [instructorId], references: [id])
  customer         Customer           @relation(fields: [customerId], references: [id])
  classAttendance ClassAttendance[]
}

enum Status {
  booked
  completed
  canceled
}

model Admins {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
}

model Children {
  id               Int                @id @default(autoincrement())
  customerId       Int
  name             String
  customer         Customer           @relation(fields: [customerId], references: [id])
  classAttendance  ClassAttendance[]
}

model ClassAttendance {
  classId   Int
  childrenId Int
  class     Class   @relation(fields: [classId], references: [id])
  children   Children @relation(fields: [childrenId], references: [id])

  @@id([classId, childrenId])
}
